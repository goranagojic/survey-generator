import regex as re

from random import randint
from pathlib import Path
from string import Template

from model.survey import *
from model.question import *
from utils.database import session
from utils.logger import logger
from utils.tools import fisher_yates_shuffle


class SurveyGenerator:

    supported_export_types = ["html", "json"]

    def generate_all(self, n_surveys=None):
        """
        Generates surveys and saves them to the database.

        Surveys are generated by image group - each survey contain all questions generated for one image group.

        :param n_surveys: Maximum number of survey that should be generated. If the requested number is larger then
            a possible number of surveys that can be generated, the method generate as many surveys as it can.
        :return:
        """
        current_image_group = Images.get_min_image_group()
        max_image_group = Images.get_max_image_group()

        # iterate while there are more question groups to include in the survey
        while current_image_group <= max_image_group:

            questions = Questions.get_by_image_group(gid=current_image_group, unassigned=True)
            print(f">>> Dobavio pitanja za grupu {current_image_group}.")
            if questions is None or len(questions) == 0:
                logger.info(f"All questions assigned with group id {current_image_group} are already assigned to an "
                            f"existing survey. Skipping.")
                current_image_group += 1
                continue

            # save a survey to database so that it is assigned valid id
            current_image_group += 1
            survey = RegularSurvey(auth_page=False)
            session.add(survey)
            session.commit()

            questions = fisher_yates_shuffle(questions)

            for i in range(0, len(questions)):
                question = questions[i]
                survey.questions.append(question)
                logger.info(f"Added question {question.id} to survey {survey.id}.")

            # generate survey json and update the survey in the database
            survey.generate()

            # replace survey id placeholders in questions associated to survey with the survey id
            survey.json = re.sub("^_^", str(survey.id), survey.json)
            session.commit()

            # stop survey generation if required number of surveys is reached
            if n_surveys is not None:
                n_surveys -= 1
                if n_surveys == 0:
                    break

    @staticmethod
    def export_surveys(where, export_type="json", survey_type="regular"):
        """

        :param where:
        :param export_type:
        :param survey_type:
        :return:
        """
        # check if directory to export to is ok
        if where is not None:
            if not Path(where).is_dir():
                logger.error(f"Cannot export surveys to {where} because it is not a directory.")
                raise NotADirectoryError(f"Cannot export surveys to {where} because it is not a directory.")
            else:
                logger.info(f"Survey export is enabled. You can find exported surveys in directory '{where}'.")

        # check if export type is valid
        export_type = export_type.lower()
        if export_type not in SurveyGenerator.supported_export_types:
            logger.error(f"Cannot export survey to '{export_type}'. Supported types are "
                         f"{SurveyGenerator.supported_export_types}")
            raise ValueError(f"Cannot export survey to '{export_type}'. Supported types are "
                             f"{SurveyGenerator.supported_export_types}")

        # export content
        surveys = session.query(Survey).where(Survey.type == survey_type).all()
        if len(surveys) == 0:
            logger.warning(f"There are no surveys in a database to be exported. Skipping.")
            exit(1)

        for survey in surveys:
            if type(survey) == RegularSurvey:
                prefix = "regular"
            else:
                prefix = "control"
            if export_type == "json":
                survey_filename = f"{prefix}-survey-{survey.id}.t2.json"
                target_path = Path(where) / survey_filename
                with open(target_path, "w") as fout:
                    fout.write(survey.json)
                    logger.info(f"Survey {survey_filename} saved!")
            else:  # html
                # $head - html head section
                # $body - html body section
                html = Template("""
<html>
                    $head
                    $body
</html>
                """).substitute({
                    "head": SurveyGenerator._generate_html_head_template(),
                    "body": SurveyGenerator._genenerate_html_body_template().substitute({
                        "survey_json": survey.json,
                        "jqueryselector": "$"
                    })
                })
                survey_filename = f"{prefix}-survey-{survey.id}.t2.html"
                target_path = Path(where) / survey_filename
                with open(target_path, "w") as fout:
                    fout.write(html)
                    logger.info(f"Survey {survey_filename} saved!")

    @staticmethod
    def _generate_html_head_template():
        return """ 
  <head> 
    <meta charset="UTF-8">

    <!-- favicon settings --> 
    <link rel="apple-touch-icon" sizes="180x180" href="apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="favicon-16x16.png">
    <link rel="manifest" href="site.webmanifest">
    <link rel="mask-icon" href="safari-pinned-tab.svg" color="#5bbad5">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">
    
    <!-- jquery and survey.jquery -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <link href="https://unpkg.com/survey-jquery@1.8.41/modern.css" type="text/css" rel="stylesheet" />
    <script src="https://unpkg.com/survey-jquery@1.8.41/survey.jquery.min.js"></script>
    
    <!-- zoom script -->
    <!-- see: https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_image_zoom -->
    <script>
      let DoctorData = {
         //PHP-DOCTOR-DATA-REPLACE
      };
      let SurveyData = {
         //PHP-SURVEY-DATA-REPLACE
      };
     </script>
  </head>
"""

    @staticmethod
    def _genenerate_html_body_template():
        # $survey_json - survey json string saved in a database
        # $jqueryselector - is to be substitutes with "$" as a workaround
        return Template("""
  <body>
    <div id="surveyContainer"></div>
    
    <!-- Init survey -->
    <script>
      Survey.StylesManager.applyTheme("modern");
      var surveyJSON = $survey_json
      function sendDataToServer(sender) {
          let aid = SurveyData.id;
          let akey = SurveyData.APIKey;
          let xhr = new XMLHttpRequest();
          xhr.open("POST", "./advance.php?anketa=' + aid + "&api=' + akey);
          xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");
          xhr.send(JSON.stringify(sender.data));
      }
      var survey = new Survey.Model(surveyJSON);
      $jqueryselector("#surveyContainer").Survey({
          model: survey,
          onComplete: sendDataToServer
      });
    </script>
  </body>
""")


